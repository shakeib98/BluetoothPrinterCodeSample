public class BarcodeScreen extends AppCompatActivity {

    private RecyclerView recyclerView, recyclerViewDeviceList;
    private RecyclerView.Adapter mAdapter;
    private RecyclerView.LayoutManager layoutManager;
    DeviceListAdapter adapter;
    TextView textView;
    Button print, search;
    Context context;
    AlertDialog alertDialog;
    ProgressBar progressBar;

    BluetoothAdapter mBluetoothAdapter;
    BluetoothSocket mmSocket;
    OutputStream mmOutputStream;
    BluetoothDevice mmDevice;
    List<BluetoothDevice> bluetoothDevices = new ArrayList<>();
    private String TAG = "BarcodeScreen";
    InputStream mmInputStream;
    Thread workerThread;

    byte[] readBuffer;
    int readBufferPosition;
    volatile boolean stopWorker;

    boolean socketFlag = false;

    private final BroadcastReceiver mBroadcastReceiver1 = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            // When discovery finds a device
            assert action != null;
            if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
                final int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR);

                switch (state) {
                    case BluetoothAdapter.STATE_OFF:
                        Log.d(TAG, "onReceive: STATE OFF");
                        bluetoothDevices.clear();
                        break;
                    case BluetoothAdapter.STATE_TURNING_OFF:
                        Log.d(TAG, "mBroadcastReceiver1: STATE TURNING OFF");
                        break;
                    case BluetoothAdapter.STATE_ON:
                        Log.d(TAG, "mBroadcastReceiver1: STATE ON");
                        discover();
                        unregisterReceiver(mBroadcastReceiver1);
                        break;
                    case BluetoothAdapter.STATE_TURNING_ON:
                        Log.d(TAG, "mBroadcastReceiver1: STATE TURNING ON");
                        break;
                }
            }
        }
    };

    private final BroadcastReceiver mBroadcastReceiver2 = new BroadcastReceiver() {
        @Override
        public void onReceive(final Context context, Intent intent) {
            final String action = intent.getAction();
            Log.d(TAG, "onReceive: ACTION FOUND.");
            if (action.equals(BluetoothDevice.ACTION_FOUND)) {

                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                bluetoothDevices.add(device);
                adapter.notifyDataSetChanged();
                Log.d(TAG, "onReceive: " + device.getName() + ": " + device.getAddress());

            } else if (action.equals(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)) {
                progressBar.setVisibility(View.GONE);
                recyclerViewDeviceList.setVisibility(View.VISIBLE);
                mBluetoothAdapter.cancelDiscovery();
                unregisterReceiver(mBroadcastReceiver2);
            }
        }
    };

    private final BroadcastReceiver mBroadcastReceiver3 = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            final String action = intent.getAction();

            assert action != null;
            if(action.equals(BluetoothDevice.ACTION_BOND_STATE_CHANGED)){
                BluetoothDevice mDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                //3 cases:
                //case1: bonded already
                if (mDevice.getBondState() == BluetoothDevice.BOND_BONDED){
                    Log.d(TAG, "BroadcastReceiver: BOND_BONDED.");
                    createConnection(mmDevice);
                }
                //case2: creating a bone
                if (mDevice.getBondState() == BluetoothDevice.BOND_BONDING) {
                    Log.d(TAG, "BroadcastReceiver: BOND_BONDING.");
                }
                //case3: breaking a bond
                if (mDevice.getBondState() == BluetoothDevice.BOND_NONE) {
                    Log.d(TAG, "BroadcastReceiver: BOND_NONE.");
                }
            }
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_barcode_screen);


        initViews();
        actionViews();

        //Broadcasts when bond state changes (ie:pairing)
        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
        registerReceiver(mBroadcastReceiver3, filter);

        System.out.println("========= List Size : "+Global.list.size());

//        textView.setText(String.valueOf(Global.list.size()));
        recyclerView.setHasFixedSize(true);
        layoutManager = new LinearLayoutManager(BarcodeScreen.this);
        recyclerView.setLayoutManager(new GridLayoutManager(BarcodeScreen.this, 2));

        mAdapter = new recyclerAdapter(Global.list);
        recyclerView.setAdapter(mAdapter);
    }

    @Override
    protected void onStart() {
        super.onStart();
        //Broadcasts when bond state changes (ie:pairing)
        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
        registerReceiver(mBroadcastReceiver3, filter);
    }

    void initViews() {
        recyclerView = findViewById(R.id.recyclerView);

        print = findViewById(R.id.printQrcode);
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        context = this;


    }

    void actionViews() {
        print.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                enableBT();
            }
        });
    }

    private void enableBT() {
        if (!mBluetoothAdapter.isEnabled()) {
            Log.d(TAG, "enableDisableBT: enabling BT.");
            Toast.makeText(context, "Bluetooth Not Enabled", Toast.LENGTH_SHORT).show();
            Intent enableBTIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivity(enableBTIntent);

            IntentFilter BTIntent = new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED);
            registerReceiver(mBroadcastReceiver1, BTIntent);
        }
        if (mBluetoothAdapter.isEnabled()) {
            Log.d(TAG, "enableDisableBT: Enabled.");
            Toast.makeText(context, "Bluetooth Enabled", Toast.LENGTH_SHORT).show();

            discover();
            IntentFilter BTIntent = new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED);
            registerReceiver(mBroadcastReceiver1, BTIntent);
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        Log.d(TAG, "onStop");
        mBluetoothAdapter.disable();
        try {
            if(mmOutputStream !=null){
                mmOutputStream.close();
                mmSocket.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }


        unregisterReceiver(mBroadcastReceiver3);

    }

    // this will send text data to be printed by the bluetooth printer
    void sendData(byte[] command) {
        try {

            mmOutputStream.write(command);
            startActivity(new Intent(context,ReceiverLanding.class));
            finish();
            Log.d(TAG, "DATA SENT");
            // tell the user data were sent

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void printPhoto(List<Bitmap> list) {
        Log.e(TAG, "In print photo");

        try {
            for(Bitmap bitmap : list){
                if (bitmap != null) {
                    Bitmap bitmap1 = Bitmap.createScaledBitmap(bitmap, 255, 255, false);
                    byte[] command = Utils.decodeBitmap(bitmap1);
                    sendData(command);
                } else {
                    Log.e("Print Photo error", "the file isn't exists");
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
            Log.e("PrintTools", "the file isn't exists");
            Log.e("PrintTools", e.getMessage());
        }
    }

    private void discover() {
        Log.d(TAG, "In discover");
        if (!mBluetoothAdapter.isDiscovering()) {

            Log.d(TAG, "In discover discovering");

            checkBTPermissions();
            mBluetoothAdapter.startDiscovery();
            itemAlertBox();
            IntentFilter discoverDevicesIntent = new IntentFilter(BluetoothDevice.ACTION_FOUND);
            discoverDevicesIntent.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
            registerReceiver(mBroadcastReceiver2, discoverDevicesIntent);
        }
    }

    private void checkBTPermissions() {
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP) {
            int permissionCheck = this.checkSelfPermission("ManifestPdf.permission.ACCESS_FINE_LOCATION");
            permissionCheck += this.checkSelfPermission("ManifestPdf.permission.ACCESS_COARSE_LOCATION");
            permissionCheck += this.checkSelfPermission("ManifestPdf.permission.BLUETOOTH_PRIVILEGED");
            if (permissionCheck != 0) {

                this.requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.BLUETOOTH_PRIVILEGED}, 1001); //Any number
            }
        } else {
            Log.d(TAG, "checkBTPermissions: No need to check permissions. SDK version < LOLLIPOP.");
        }
    }


    private void itemAlertBox() {
        AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this);
        LayoutInflater inflater = this.getLayoutInflater();
        final View dialogView = inflater.inflate(R.layout.bluetooth_device_list, null);
        dialogBuilder.setView(dialogView);
        recyclerViewDeviceList = dialogView.findViewById(R.id.recyclerViewDeviceList);
        recyclerViewDeviceList.setVisibility(View.GONE);
        progressBar = dialogView.findViewById(R.id.progressBar);
        search = dialogView.findViewById(R.id.searchForDevice);
        progressBar.setVisibility(View.VISIBLE);


        /*search.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                recyclerView.setVisibility(View.GONE);
                progressBar.setVisibility(View.VISIBLE);
                bluetoothDevices.clear();
                adapter.notifyDataSetChanged();
                discover();
            }
        });*/

        search.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                enableBT();
            }
        });


        adapter = new DeviceListAdapter(bluetoothDevices, new CustomListener() {
            @Override
            public void onItemClick(View v, final int position) {
                Log.d(TAG, String.valueOf(position));
                if (bluetoothDevices.get(position).getBondState() == BluetoothDevice.BOND_BONDED) {
                    Toast.makeText(context, "Already Bonded", Toast.LENGTH_SHORT).show();
                    mmDevice = bluetoothDevices.get(position);
                    createConnection(mmDevice);
                } else if (bluetoothDevices.get(position).getBondState() == BluetoothDevice.BOND_NONE) {
                    bluetoothDevices.get(position).createBond();
                    mmDevice = bluetoothDevices.get(position);
                    recyclerViewDeviceList.setVisibility(View.GONE);
                    progressBar.setVisibility(View.VISIBLE);
                    Toast.makeText(context, "Bonded", Toast.LENGTH_SHORT).show();
                  //  alertDialog.dismiss();
                }

            }
        });
        recyclerViewDeviceList.setAdapter(adapter);
        recyclerViewDeviceList.setLayoutManager(new LinearLayoutManager(context, RecyclerView.VERTICAL, false));


        alertDialog = dialogBuilder.create();

        if (bluetoothDevices.size() != 0) {
            bluetoothDevices.clear();
        }


        alertDialog.show();
    }

    void createConnection(BluetoothDevice device){
        try {
            UUID uuid = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");
            mmSocket = mmDevice.createRfcommSocketToServiceRecord(uuid);
            mmSocket.connect();
            mmOutputStream = mmSocket.getOutputStream();
            Log.d(TAG, "In try");
            printPhoto(Global.list);
            alertDialog.dismiss();
        } catch (IOException e) {
            Log.d(TAG, "In catch");
            e.printStackTrace();
        }
    }

    private void checkForPairedDevices(){
        Log.d(TAG, "in check for paired devices");

        itemAlertBox();
        Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();

        if (pairedDevices.size() > 0) {
            // There are paired devices. Get the name and address of each paired device.
            bluetoothDevices.addAll(pairedDevices);
            progressBar.setVisibility(View.GONE);
            recyclerViewDeviceList.setVisibility(View.VISIBLE);
        }


    }
}
